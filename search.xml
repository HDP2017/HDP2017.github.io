<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[你好，hexo]]></title>
    <url>%2F2018%2F03%2F14%2F%E4%BD%A0%E5%A5%BD%EF%BC%8Chexo%2F</url>
    <content type="text"><![CDATA[关于hexo与github搭载blog，是看到了一个大神小姐姐的blog之后，本来之前已经注册了简书，打算在简书写文章的，不过没写几篇。刚好搭一个自己的东西还是很不错的，当然，主要是因为hexo用起来简单，美观。 准备工作需要安装的东西，git、node。需要一个github账号。 安装hexo用node全局安装hexo mpm install -g hexo-cli 以前的版本是安装的hexo，现在都是hexo-cli 做好这一步，其实就可以开始试着新建一个项目了。 开始首先，新建一个文件夹，在该文件夹下打开命令行工具，win10可以使用powershell hexo init blogName//init可以简写为i,blogName为项目名称。 下一步可以打开刚刚的文件夹，可以看到有一个blogName文件夹，在里面打开powershell，运行 hexo g//相当于编译 hexo s//本地运行，默认端口为4000 这样就可以在浏览器输入local host：4000查看。如果可以正常打开hexo页面就算是成功了，这就是一个最简单的初始项目。接下来就可以进行个人的设计。 主题hexo优秀的主题有特别多，其实这部分完全按照个人喜好，而刚好我喜欢的那个blog风格就是用的next。这个主题是最火的主题之一吧。安装方法： git clone https://github.com/iissnan/hexo-theme-next themes/next 不管选择安装什么主题，安装之后需要配置才能生效，有两个文件特别重要，第一个位置项目根目录的_config.yml文件，称作站点配置文件，另一个位于项目根目录的\themes\主题名称_config.yml文件，叫做主题配置文件，几乎所有的配置都是修改这两个文件。打开站点配置文件，将theme字段修改为主题名称，例如，next。重新编译，运行就可以看效果。这里一边情况下需要执行一下hexo clean,清除之前的编译文件。 hexo clean hexo g hexo s 之后打开浏览器localhost:4000,就可以查看主题更改后的效果。 主题配置一般主题都会有GitHub或者是网站主页，进去可以查看主题配置方法，基本都是修改主题配置文件。比如next自带三种主题样式，可以随自己喜欢修改。推荐看官方文档，而不是找别人写的教程。 github截至现在，项目还只是个本地的文件，只能在localhost运行，借助GitHub就可以所有人都访问了。首先，需要一个github账号。注册之后就新建项目。现在的GitHub新建项目比之前的简单好多。选择New repository就可以一步步往下就可以了。 设置SSH Key主要是觉得配置了SSH之后推代码更方便一点。任意文件夹下打开git， ssh-keygen -t rsa -C &quot;your email&quot; 这样一路enter就可以创建好密钥，期间如果想设置密码，可以设置，这里我是没设置的。然后按照提示找到密钥文件的位置，打开复制就好。然后在GitHub点击setting，进去找到SSH选项，进去粘贴就好。 修改站点配置文件这一步找到deploy修改如下： type: git repo: 地址//刚刚新建项目的SSH地址 branch: master 下一步需要安装一个git插件，在项目根目录 npm install hexo-deployer-git --save 之后hexo d就可以上传，如果失败一般是git没有链接成功。回头重新仔细配置ssh，一般不会失败。 修改整个blog首页其实next主题的默认首页是文章，默认是直接显示每篇文章的全部内容，一篇一篇列下来，看起来与美观不沾边，不过可以修改只显示开头，然后多一个全部内容的按钮，这样会稍微好看一些。不过，做自己的网页，还是想要一个自己个性化定制的首页。其实写这篇blog的主要目的是为了这一块东西，因为我自己做的时候，这个东西卡了一天，找教程也没解决，最后请教文章开头提到的小姐姐，才解决。其实当时自己找教程没解决之后，后来自己摸索的时候，心里有个眉目，不过方法比较笨，经过小姐姐的解答，解决了。具体如下， 自己写一个index当然了，自己个性化首页，肯定需要自己写出来这个首页的index.html文件。这个文件当然可以引用一些js插件，位置写好就行。 位置至于文件放置的位置，需要分析一下。首先，项目编译之后会产生一个public文件夹，本地运行以及上传至GitHub都是这个文件夹里面的文件，一开始的想法是将编译后的public文件里的index.html替换为自己写的那个，然后再推入到GitHub，这样也算可以。不过每次都这么来的话，写一篇文章就需要重新手动替换一下，麻烦的嘞。 解决再回到编译，编译到public的文件，可以发现其实是项目的source以及主题的source文件夹里面的所有的文件，那么这就好办了。首先，卸载一个叫做主题渲染模块，hexo-generator-index，可以找到node_modules文件夹里面对应的文件夹整个删除，也可以手动uninstall，否则的话，自己的主页还会经过渲染。再下一步，将自己写的index.html文件放入主题下的source文件夹下，自己测试放入项目文件夹不行，还会经过渲染。当然，如果自己写的index.html文件用到了什么js插件的话，也同样放入该文件夹，我是直接放进去source下的js文件夹下，反正也都是js。最后，编译试试，推入GitHub。]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于HDP2017]]></title>
    <url>%2F2018%2F03%2F09%2F%E5%85%B3%E4%BA%8EHDP2017%2F</url>
    <content type="text"><![CDATA[HDP2017具体来说是一个昵称，所有有关于编程，或者说是自己项目有关的账号，包括而不限于GitHub、bitbucket、码云等等。 从HDP2017开始而我接触到编程的第一个账号也就是GitHub的HDP2017，这是在2017年初，具体应该是10号之前，当时由于自己学习C++未果，项目老师安排转JAVA，后来其实变成了前端。当时的项目老师（是我关于编程的最重要的一个老师），他让我申请GitHub账号并且克隆项目代码到本地，那是我这辈子第一次接触这些东西。其实2017算是我个人学习编程的元年，16年秋入学，第一学习学习C++，结果啥也没学到，直到从HDP2017开始，才算是真的打开这扇门。 前端开始当时的项目是将使用angular1.x+framework7的一个网页APP改写为使用vue+framework7，这个项目真正着手做，大概经历了四五个月。由于是改写项目，所以后台不用怎么动，这就也决定了后来的前端学习。其实这个项目是自己学东西的关键，一边有老师教，一边自己摸索，进度飞快，我们也一起解决了很多问题。尤其是17年夏天，暑假的那几十天时间吧，几乎就是白天自己写代码，晚上提交之后，老师查看并提出问题，或者布置下一个任务（老师在美国），每天推完分支更新之后，回去睡觉，第二天醒来老师就已经做好了新的一天的安排。回想起来真的很满足那个时候的自己。 前端+后来到了9-10月份，上一个项目已经基本完结，期间其实老师有要做Android的打算，我也已经配置好所有的东西并且写了几个页面了，不过最后搁置。后来转实验室的一个大项目，自己的工作差不多是做一个手机WebAPP,需要用angular4+bootstrap，由于继续使用老项目的后台和数据库，自己的活也就又只剩下了前端，自此至今，一直做前端。其实中间做Android的那一段时间，接触的Java知识也获益匪浅，虽然不怎么管后台，有了这个基础，不至于一无所知。 HDP2017+未来会不会从事前端或者IT相关工作，HDP2017不会放下，我的2017不会忘记，当然，还有那个最好的老师hanaldo!]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>HDP2017</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
